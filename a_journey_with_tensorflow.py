# -*- coding: utf-8 -*-
"""A Journey with TensorFlow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jI08hts1hTLr8zB9zyAx6jSgeddoUL3A

**Checking if TensorFlow is installed**
"""

import tensorflow as tf
print(tf.__version__)

"""# STEP 2 : Understaing Tensors

# **Task 1 : Creating Tensors**
"""

import tensorflow as tf

# Scalar (0-D tensor)
scalar = tf.constant(4)
print("Scalar:",scalar)

n = tf.constant(5)
print("n:",n)

#Vector (1-D tensor)
vector = tf.constant([1,2,3,4,5])
print("Vector:",vector)

#Matrix (2-D tensor)
matrix = tf.constant([[1,2],[3,4]])
print("Matrix:",matrix)

# 3D Tensor
tensor_3d = tf.constant([[[1,2],[3,4]],[[5,6],[7,8]]])
print("3D Tensor:",tensor_3d)

"""# Task 2 : Tensor Properties"""

# Checking tensor shape
print("Scalar Shape:",scalar.shape)
print("Vector Shape:",vector.shape)
print("Matrix Shape:",matrix.shape)
print("3D Tensor Shape:",tensor_3d.shape)

# Checking tensor datatype
print("Scalar Datatype:",scalar.dtype)
print("Vector Datatype:",vector.dtype)
print("Matrix Datatype:",matrix.dtype)
print("3D Tensor Datatype:",tensor_3d.dtype)

#Converting NumPy array to Tensor
import numpy as np
numpy_array = np.array([[1,2],[3,4]])
tensor_from_array = tf.convert_to_tensor(numpy_array)
print("Tensor from NumPy Array:",tensor_from_array)

"""# Task 3 : Tensor Operations"""

# Basic math operations
a = tf.constant([5, 10, 15])
b = tf.constant([2, 4, 6])

print("Addition:",tf.add(a,b))
print("Subtraction:",tf.subtract(a,b))
print("Multiplication:",tf.multiply(a,b))
print("Division:",tf.divide(a,b))
print("Dot Product:", tf.tensordot(a, b, axes = 1))

"""# Mini Challenge"""

#Create a 3x3 tensor with random values
matrix = tf.random.uniform(shape=(3,3))
print(matrix)

#Matrix multiplication using tf.matmuk
multiply_matrix = tf.matmul(matrix,matrix)
print(multiply_matrix)

"""# Step 3 : TensorFlow Data Pipelines

Task 1 : Creating Tenso
"""

#Creating a Dataset
dataset = tf.data.Dataset.from_tensor_slices([1,2,3,4,5])
for element in dataset:
  print(element.numpy())

"""# STEP 4 : Building a Simple Neural Network

# Task 1 : Load the MNIST Dataset
"""

import tensorflow as tf
from tensorflow import keras

# Load MNIST dataset
mnist = keras.datasets.mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize pixel values  (0-255 -> 0-1)
X_train, X_test = X_train / 255.0, X_test / 255.0

print("Training data shape:", X_train.shape)
print("Testing data shape:", X_test.shape)

"""# Task 2 : Create a Simple Neural Network"""

# Define the model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  #Flatten 28x28 images
    keras.layers.Dense(128, activation='relu'),  #Hidden layer with 128 neurons and ReLU activation
    keras.layers.Dropout(0.2),  #Dropout layer to prevent overfitting
    keras.layers.Dense(10, activation='softmax')  #Output layer (10 classes)
])

#Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Display model summary
model.summary()

"""# Task 3 : Train the Model"""

# Train the model
model.fit(X_train, y_train, epochs = 5)